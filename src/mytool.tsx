import {
  Alert,
  AlertTitle,
  Backdrop,
  CircularProgress,
  Container,
  Skeleton,
  Typography,
} from '@mui/material'
import * as React from 'react'

type UserData = {
  name: string
  id: number
  account: string
}

interface MyToolState {
  isLoaded: boolean
  user?: UserData
  error?: string
}

interface MyToolResp {
  data: UserData | null
  error: string | null
}

// partially mocked, usually the validators are generated by Ajv
function isDataResp(data: unknown): data is MyToolResp {
  if (typeof data !== 'object' || data === null) {
    return false
  }

  if (!('error' in data) || !('data' in data)) {
    return false
  }

  if (typeof data.error !== 'string' && data.error !== null) {
    return false
  }

  // simplified for the reproducer
  if (typeof data.data !== 'object' && data.data !== null) {
    return false
  }

  return true
}

export class MyTool extends React.PureComponent<
  Record<string, unknown>,
  MyToolState
> {
  constructor(props: Record<string, unknown>) {
    super(props)

    this.state = {
      isLoaded: false,
    }
  }

  componentDidMount() {
    const req = new Request('https://example.com/api/session', {
      method: 'GET',
      cache: 'no-cache',
      headers: new Headers({
        Authorization: 'Bearer mySecretToken',
        Accept: 'application/json',
      }),
    })
    fetch(req)
      .then((res) => res.json())
      .then((data) => {
        if (!isDataResp(data)) {
          throw new TypeError('Invalid Server Response')
        }

        if (data.error !== null) {
          throw new Error(data.error)
        }

        if (data.data !== null) {
          this.setState({
            isLoaded: true,
            user: data.data,
          })
        }

        throw new Error('Unknown server error')
      })
      .catch((error) => {
        let err_msg = 'Unknown Error'
        if (error instanceof Error) {
          err_msg = error.message
        }

        this.setState({
          isLoaded: true,
          user: undefined,
          error: err_msg,
        })
      })
  }

  render() {
    const { isLoaded, user, error } = this.state
    return (
      <Container>
        <Typography component="h1">MyTool: Reproduce msw regression</Typography>
        <Backdrop
          open={!isLoaded}
          sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
        >
          <CircularProgress />
        </Backdrop>
        <Typography component="p">
          Hello {isLoaded ? user?.name : <Skeleton variant="text" />}!
        </Typography>
        {isLoaded && error ? (
          <Alert severity="error">
            <AlertTitle>Failed to fetch session</AlertTitle>
            An error occured while fetching your session data: {error}
          </Alert>
        ) : (
          ''
        )}
      </Container>
    )
  }
}
